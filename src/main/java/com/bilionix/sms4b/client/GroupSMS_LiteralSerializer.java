// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R2)
// Generated source version: 1.1.3

package com.bilionix.sms4b.client;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.LiteralObjectSerializerBase;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.streaming.XMLReaderUtil;
import com.sun.xml.rpc.streaming.XMLWriter;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

import javax.xml.namespace.QName;

public class GroupSMS_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final QName ns1_SessionId_QNAME = new QName("SMS4B", "SessionId");
    private static final QName ns2_long_TYPE_QNAME = SchemaConstants.QNAME_TYPE_LONG;
    private CombinedSerializer ns2_myns2__long__long_Long_Serializer;
    private static final QName ns1_Group_QNAME = new QName("SMS4B", "Group");
    private static final QName ns1_Source_QNAME = new QName("SMS4B", "Source");
    private static final QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final QName ns1_Encoding_QNAME = new QName("SMS4B", "Encoding");
    private static final QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer ns2_myns2__int__int_Int_Serializer;
    private static final QName ns1_Body_QNAME = new QName("SMS4B", "Body");
    private static final QName ns1_Off_QNAME = new QName("SMS4B", "Off");
    private static final QName ns1_Start_QNAME = new QName("SMS4B", "Start");
    private static final QName ns1_Period_QNAME = new QName("SMS4B", "Period");
    private static final QName ns1_List_QNAME = new QName("SMS4B", "List");
    private static final QName ns1_ArrayOfGroupSMSList_TYPE_QNAME = new QName("SMS4B", "ArrayOfGroupSMSList");
    private CombinedSerializer ns1_myArrayOfGroupSMSList_LiteralSerializer;

    public GroupSMS_LiteralSerializer(QName type, String encodingStyle) {
        this(type, encodingStyle, false);
    }

    public GroupSMS_LiteralSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }

    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns2_myns2__long__long_Long_Serializer = (CombinedSerializer)registry.getSerializer("", long.class, ns2_long_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", String.class, ns2_string_TYPE_QNAME);
        ns2_myns2__int__int_Int_Serializer = (CombinedSerializer)registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
        ns1_myArrayOfGroupSMSList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.bilionix.sms4b.client.ArrayOfGroupSMSList.class, ns1_ArrayOfGroupSMSList_TYPE_QNAME);
    }

    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.bilionix.sms4b.client.GroupSMS instance = new com.bilionix.sms4b.client.GroupSMS();
        Object member=null;
        QName elementName;
        java.util.List values;
        Object value;

        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SessionId_QNAME)) {
                member = ns2_myns2__long__long_Long_Serializer.deserialize(ns1_SessionId_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setSessionId(((Long)member).longValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SessionId_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Group_QNAME)) {
                member = ns2_myns2__long__long_Long_Serializer.deserialize(ns1_Group_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setGroup(((Long)member).longValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Group_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Source_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Source_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setSource((String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Encoding_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_Encoding_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setEncoding(((Integer)member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Encoding_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Body_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Body_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setBody((String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Off_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Off_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setOff((String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Start_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Start_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setStart((String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Period_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Period_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setPeriod((String)member);
                reader.nextElementContent();
            }
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_List_QNAME)) {
                member = ns1_myArrayOfGroupSMSList_LiteralSerializer.deserialize(ns1_List_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setList((com.bilionix.sms4b.client.ArrayOfGroupSMSList)member);
                reader.nextElementContent();
            }
        }

        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (Object)instance;
    }

    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.bilionix.sms4b.client.GroupSMS instance = (com.bilionix.sms4b.client.GroupSMS)obj;

    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.bilionix.sms4b.client.GroupSMS instance = (com.bilionix.sms4b.client.GroupSMS)obj;

        if (new Long(instance.getSessionId()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__long__long_Long_Serializer.serialize(new Long(instance.getSessionId()), ns1_SessionId_QNAME, null, writer, context);
        if (new Long(instance.getGroup()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__long__long_Long_Serializer.serialize(new Long(instance.getGroup()), ns1_Group_QNAME, null, writer, context);
        if (instance.getSource() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSource(), ns1_Source_QNAME, null, writer, context);
        }
        if (new Integer(instance.getEncoding()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new Integer(instance.getEncoding()), ns1_Encoding_QNAME, null, writer, context);
        if (instance.getBody() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getBody(), ns1_Body_QNAME, null, writer, context);
        }
        if (instance.getOff() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getOff(), ns1_Off_QNAME, null, writer, context);
        }
        if (instance.getStart() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getStart(), ns1_Start_QNAME, null, writer, context);
        }
        if (instance.getPeriod() != null) {
            ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getPeriod(), ns1_Period_QNAME, null, writer, context);
        }
        if (instance.getList() != null) {
            ns1_myArrayOfGroupSMSList_LiteralSerializer.serialize(instance.getList(), ns1_List_QNAME, null, writer, context);
        }
    }
}

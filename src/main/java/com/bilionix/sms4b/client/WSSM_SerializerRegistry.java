// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R2)
// Generated source version: 1.1.3

package com.bilionix.sms4b.client;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.SerializerConstants;
import com.sun.xml.rpc.encoding.SingletonDeserializerFactory;
import com.sun.xml.rpc.encoding.SingletonSerializerFactory;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;

import javax.xml.namespace.QName;
import javax.xml.rpc.encoding.Deserializer;
import javax.xml.rpc.encoding.Serializer;
import javax.xml.rpc.encoding.TypeMapping;
import javax.xml.rpc.encoding.TypeMappingRegistry;

public class WSSM_SerializerRegistry implements SerializerConstants {
    public WSSM_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("SMS4B", "ArrayOfGroupSMSList");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ArrayOfGroupSMSList_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ArrayOfGroupSMSList.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "ArrayOfCheckSMSList");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ArrayOfCheckSMSList_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ArrayOfCheckSMSList.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "ParamSMSResult");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ParamSMSResult_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ParamSMSResult.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "GroupSMSResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.GroupSMSResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.GroupSMSResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "SendSMS");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.SendSMS_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.SendSMS.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "ParamSMSResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ParamSMSResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ParamSMSResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "ArrayOfSMSList");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ArrayOfSMSList_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ArrayOfSMSList.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "LoadSMSResult");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.LoadSMSResult_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.LoadSMSResult.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CheckSMSResult");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CheckSMSResult_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CheckSMSResult.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "LoadSMS");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.LoadSMS_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.LoadSMS.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CheckSMS");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CheckSMS_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CheckSMS.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CheckSMSList");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CheckSMSList_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CheckSMSList.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "GroupSMSResult");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.GroupSMSResult_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.GroupSMSResult.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CloseSessionResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CloseSessionResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CloseSessionResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "ArrayOfString");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ArrayOfString_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ArrayOfString.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CancelGroupResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CancelGroupResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CancelGroupResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "GroupSMS");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.GroupSMS_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.GroupSMS.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CloseSession");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CloseSession_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CloseSession.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CheckSMSResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CheckSMSResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CheckSMSResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "CancelGroup");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.CancelGroup_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.CancelGroup.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "StartSessionResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.StartSessionResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.StartSessionResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "SendSMSResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.SendSMSResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.SendSMSResponse.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "SMSList");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.SMSList_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.SMSList.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "StartSession");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.StartSession_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.StartSession.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "GroupSMSList");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.GroupSMSList_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.GroupSMSList.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "ParamSMS");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.ParamSMS_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.ParamSMS.class, type, serializer);
        }
        {
            QName type = new QName("SMS4B", "LoadSMSResponse");
            CombinedSerializer serializer = new com.bilionix.sms4b.client.LoadSMSResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.bilionix.sms4b.client.LoadSMSResponse.class, type, serializer);
        }
        return registry;
    }
    
    private static void registerSerializer(TypeMapping mapping, Class javaType, QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}

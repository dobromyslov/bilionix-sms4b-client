// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R2)
// Generated source version: 1.1.3

package com.bilionix.sms4b.client;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.LiteralObjectSerializerBase;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.streaming.XMLReaderUtil;
import com.sun.xml.rpc.streaming.XMLWriter;

import javax.xml.namespace.QName;
import java.util.ArrayList;

public class ArrayOfCheckSMSList_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final QName ns1_CheckSMSList_QNAME = new QName("SMS4B", "CheckSMSList");
    private static final QName ns1_CheckSMSList_TYPE_QNAME = new QName("SMS4B", "CheckSMSList");
    private CombinedSerializer ns1_myCheckSMSList_LiteralSerializer;

    public ArrayOfCheckSMSList_LiteralSerializer(QName type, String encodingStyle) {
        this(type, encodingStyle, false);
    }

    public ArrayOfCheckSMSList_LiteralSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }

    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myCheckSMSList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.bilionix.sms4b.client.CheckSMSList.class, ns1_CheckSMSList_TYPE_QNAME);
    }

    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.bilionix.sms4b.client.ArrayOfCheckSMSList instance = new com.bilionix.sms4b.client.ArrayOfCheckSMSList();
        Object member;
        QName elementName;
        java.util.List<Object> values;
        Object value;

        reader.nextElementContent();
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_CheckSMSList_QNAME))) {
            values = new ArrayList<>();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_CheckSMSList_QNAME))) {
                    value = ns1_myCheckSMSList_LiteralSerializer.deserialize(ns1_CheckSMSList_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.bilionix.sms4b.client.CheckSMSList[values.size()];
            member = values.toArray((Object[]) member);
            instance.setCheckSMSList((com.bilionix.sms4b.client.CheckSMSList[])member);
        }
        else {
            instance.setCheckSMSList(new com.bilionix.sms4b.client.CheckSMSList[0]);
        }

        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return instance;
    }

    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.bilionix.sms4b.client.ArrayOfCheckSMSList instance = (com.bilionix.sms4b.client.ArrayOfCheckSMSList)obj;

    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.bilionix.sms4b.client.ArrayOfCheckSMSList instance = (com.bilionix.sms4b.client.ArrayOfCheckSMSList)obj;
        
        if (instance.getCheckSMSList() != null) {
            for (int i = 0; i < instance.getCheckSMSList().length; ++i) {
                ns1_myCheckSMSList_LiteralSerializer.serialize(instance.getCheckSMSList()[i], ns1_CheckSMSList_QNAME, null, writer, context);
            }
        }
    }
}
